"""
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий
набор натуральных чисел. У пользователя необходимо запрашивать новый элемент рейтинга.
Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент
с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].


1) Невозрастающий набор натуральных чисел -- это может быть, например, 9,1,4,8,12,4,3. Может быть, имелся в виду набор
чисел, отсортированных по убыванию? Решил, что так было бы слишком просто -- ведь можно было бы размещать новый элемент
просто в конец рейтинга, а потом сортировать рейтинг при помощи print(sorted(ratings, reverse=True)), так что сделал
рандомный порядок значений.

2) Непонятно, почему в подсказке при вводе пользователем числа 8 оно размещается в начале рейтинга, а при вводе числа 1
оно размещается в конце рейтинга. (Возможно, порядок значений всё-таки должен быть убывающим...) Решил размещать всё в
начале рейтинга."""

ratings = [8, 9, 26, 19, 1, 2, 3, 3, 20, 71, 71, 5]

print('Текущие значения:', ratings)

new_rating = int(input('Добавить значение (число): '))

occurs = ratings.count(new_rating) # Есть ли уже такое число в рейтинге

if occurs: # В рейтинге уже есть такое число

    last_occur = len(ratings) - 1 - ratings[::-1].index(new_rating) # Найти индекс последнего появления числа в рейтинге
    ratings.insert(last_occur + 1, new_rating) # Добавляется новое число в рейтинг
    print('Рейтинг обновлён:', ratings)

else: # В рейтинге нет такого числа
    ratings.insert(0, new_rating) # Добавляется новое число в начало рейтинга
    print('Рейтинг обновлён:', ratings)
